CSCbinTreeTraverse(3)

NAME
        CSCbinTreeTraverse - traverse a libcsc balanced binary tree

SYNOPSYS
        #include "libcsc.h"

        int   CSCbinTreeTraverse (
                                 const char*            const method,
                                       CSCbinTreeType   const tree,
                                       CSCcmpFnType           clientFn,
                                 const void*            const clientData
                                 );

RETURN VALUE
        CSC_OK ......... on a successful traversal with the desired node being
                         found.

        CSC_NOTFOUND ... on a successful traversal with the desired node being
                         not found.

        CSC_BADARG ..... if libcsc was compiled with the DEBUG macro and
                         `method', `tree', or `clientFn' is NULL.

        CSC_CORRUPT .... if libcsc was compiled with the DEBUG macro and
                         CSCbinTreeTraverse() detects something munged up in'
                         the tree or in some internal data.

DESCRIPTION
        CSCbinTreeTraverse() traverses the libcsc balanced binary tree `tree'.
        `method' is a string that specifies the search algorithm (case IS
        important):

                method
                ------

                "PREFIX"
                "INFIX"
                "POSTFIX"

        `clientFn' is a pointer to a libcsc CSCcmpFnType function that is
        called for EACH NODE in the tree.  The prototype for CSCcmpFnType is:

                int    (*CSCcmpFnType) (void*, void*);

        The client callback function `clientFn' is called with the client
        supplied data and a node pointer (on which the client then needs to use
        rtsBinTreeNodeQuery()):

                stat = (*clientFn) ((void*)&node, (void*)clientData);

        This gives the client an opportunity to terminate the traversal by
        `clientFn' returning CSC_OK (indicating a match); otherwise, `clientFn'
        should return CSC_NOTFOUND.

        If `clientFn' returns any value besides CSC_NOTFOUND then the traversal
        is terminated, and the return value from CSCbinTreeTraverse() will be
        the value returned from `clientFn'.  In this case, if libcsc was
        compiled with the DEBUG macro, then there will be an assertion if the
        return value is not CSC_OK or CSC_NOTFOUND, but no other processing is
        affected.

        If clientFn is NULL, then the libcsc balanced binary tree is traversed
        according to method, but nothing interesting happens; except if libcsc
        was compiled with the DEBUG macro, in which case the tree will be
        sanity checked.

SEE ALSO
        CSCbinTreeNew(3)
        CSCbinTreeDel(3)
        CSCbinTreeInsert(3)
        CSCbinTreeTagOrderedInsert(3)
        CSCbinTreeUserSearch(3)
        CSCbinTreeTagSearch(3)
        CSCbinTreeStat(3)
        CSCbinTreePrint(3)
        CSCbinTreeNodeNew(3)
        CSCbinTreeNodeDel(3)
        CSCbinTreeNodeJoin(3)
        CSCbinTreeNodeBreak(3)
        CSCbinTreeNodeTraverse(3)
        CSCbinTreeNodeUserSearch(3)
        CSCbinTreeNodeTagSearch(3)
        CSCbinTreeNodeStat(3)
        CSCbinTreeNodePrint(3)
