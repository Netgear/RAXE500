CSCbinTreeNodeTraverse(3)

NAME
        CSCbinTreeNodeTraverse - traverse a libcsc binary tree


SYNOPSYS
        #include "libcsc.h"

        int   CSCbinTreeNodeTraverse (
                                    const char*                const method,
                                          CSCbinTreeNodeType   const node,
                                          CSCcmpFnType               clientFn,
                                    const void*                const clientData
                                     );

RETURN VALUE
        CSCbinTreeNodeTraverse() returns CSC_OK on a successful traversal with
        the desired node being found, or CSC_NOTFOUND on a successful traversal
        with the desired node being not found.

        If libcsc was compiled with the DEBUG macro and some internal tree data
        is munged up then rtsBinTreeNodeTraverse() returns CSC_CORRUPT.

        If libcsc was compiled with the DEBUG macro and invalid arguments are
        detected, then rtsBinTreeNodeTraverse() returns CSC_BADARG.

DESCRIPTION
        CSCbinTreeNodeTraverse() traverses a libcsc binary tree beginning with
        `node'.  `method' is a string that specifies the search algorithm (case
        IS important):

                method
                ------

                "PREFIX"
                "INFIX"
                "POSTFIX"

        If `clientFn' is not NULL, then it is a pointer to a libcsc CSCcmpFnType
        function that is called for EACH NODE in the tree.  The prototype for
        clientFn is:

                int    (*clientFn) (void*, void*);

        The client callback function `clientFn' is called with the client
        supplied data and a node pointer (on which the client then needs to use
        CSCbinTreeNodeQuery()):

                stat = (*clientFn) ((void*)&node, (void*)clientData);

        This gives the client an opportunity to terminate the traversal by
        returning CSC_OK; otherwise, the function pointed to by `clientFn'
        should return CSC_NOTFOUND.

        If `clientFn' returns any value besides CSC_NOTFOUND, then the tree
        traversal is terminated, and the return value from
        CSCbinTreeNodeTraverse() will be the value returned from `clientFn'.
        In this case, if libcsc was compiled with the DEBUG macro, then there
        will be an assertion if the return value is not CSC_OK or CSC_NOTFOUND,
        but no other processing is affected.

        If `clientFn' is NULL, then the libcsc binary tree is traversed
        according to `method', but nothing interesting happens.

SEE ALSO
        CSCbinTreeNew(3)
        CSCbinTreeDel(3)
        CSCbinTreeInsert(3)
        CSCbinTreeTagOrderedInsert(3)
        CSCbinTreeTraverse(3)
        CSCbinTreeUserSearch(3)
        CSCbinTreeTagSearch(3)
        CSCbinTreeStat(3)
        CSCbinTreePrint(3)
        CSCbinTreeNodeNew(3)
        CSCbinTreeNodeDel(3)
        CSCbinTreeNodeJoin(3)
        CSCbinTreeNodeBreak(3)
        CSCbinTreeNodeUserSearch(3)
        CSCbinTreeNodeTagSearch(3)
        CSCbinTreeNodeStat(3)
        CSCbinTreeNodePrint(3)
