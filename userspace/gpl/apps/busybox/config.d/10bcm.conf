#!/usr/bin/env perl

#
# DO NOT EDIT THIS FILE
#
# This file reads .config, makes changes, and writes it back
# if you need to make further changes, COPY this file to another
# executable file in the config.d directory with a .conf extension 
# and replace the ACTIONS section with your own
#

use strict;
use warnings;
use BRCM::GenConfig;

my $g;
if (!@ARGV){
  print "\n Use the default configuration file. e.g. .config \n"; 
  $g = new BRCM::GenConfig('.config');
}else{
  $g = new BRCM::GenConfig($ARGV[0]);
}

# ACTIONS start here

my $extra_brcm_path="";
if ($ENV{BRCM_EXTRA_PATH} )
{
	$extra_brcm_path="$ENV{BRCM_EXTRA_PATH}"
}

if($ENV{BUSYBOX_VANILLA_BUILD} eq "y")
{
    if($ENV{BUILD_BUSYBOX_STATIC} eq "y")
    {
        $g->set( "CONFIG_STATIC", "y" );
    }
}
else
{

}

$g->set( "CONFIG_PREFIX", qq["$ENV{INSTALL_DIR}/$extra_brcm_path"] );

if ( $ENV{BUILD_WGET_HTTPS} eq 'y' ) {
    $g->set( "CONFIG_FEATURE_WGET_OPENSSL",          "y" );
    $g->set( "CONFIG_FEATURE_WGET_AUTHENTICATION", "y" );
}
if ( $ENV{BUILD_LIBMODSW} eq '1' ) {
    $g->set( "CONFIG_FEATURE_WGET_STATUSBAR",      "y" );
    $g->set( "CONFIG_FEATURE_WGET_AUTHENTICATION", "y" );
    $g->set( "CONFIG_FEATURE_MOUNT_LOOP",      "y" );
    $g->set( "CONFIG_FEATURE_MOUNT_LOOP_CREATE", "y" );
    $g->set( "CONFIG_LOSETUP", "y" );
    $g->set( "CONFIG_TIMEOUT", "y" );
}
if ( $ENV{BUILD_BUSYBOX_GUNZIP} eq 'y' ) {
    $g->set( "CONFIG_GUNZIP",                      "y" );
}
if ( $ENV{BUILD_BUSYBOX_GZIP} eq 'y' ) {
    $g->set( "CONFIG_GZIP",                        "y" );
    $g->set( "CONFIG_FEATURE_SEAMLESS_GZ",         "y" );
}
if ( $ENV{BUILD_BUSYBOX_UNTAR} eq 'y' ) {
    $g->set( "CONFIG_TAR",                         "y" );
}
if ( $ENV{BUILD_BUSYBOX_TAR} eq 'y' ) {
    $g->set( "CONFIG_TAR",                         "y" );
    $g->set( "CONFIG_FEATURE_TAR_CREATE",          "y" );
}
if ( $ENV{BUILD_BUSYBOX_TELNET} eq 'y' ) {
    $g->set( "CONFIG_TELNET",                      "y" );
}
if ( $ENV{BUILD_BUSYBOX_NTPD} eq 'y' ) {
    $g->set( "CONFIG_NTPD",                      "y" );
}
if ( $ENV{BUILD_GPONCTL} ne '' ) {
    $g->set( "CONFIG_TRACEROUTE",                  "y" );
    $g->set( "CONFIG_TRACEROUTE6",                 "y" );
    $g->set( "CONFIG_FEATURE_TRACEROUTE_USE_ICMP", "y" );
}
if ( $ENV{BRCM_NFS_MOUNT_EN} eq 'y' ) {
    $g->set( "CONFIG_FEATURE_MOUNT_NFS", "y" );
}
if ( $ENV{BRCM_DRIVER_EMMC} eq 'y' ) {
    $g->set( "CONFIG_FDISK", "y" );
    $g->set( "CONFIG_FDISK_SUPPORT_LARGE_DISKS", "y" );
    $g->set( "CONFIG_FEATURE_FDISK_WRITABLE", "y" );    
    $g->set( "CONFIG_MKFS_VFAT", "y" );
    $g->set( "CONFIG_DD", "y" );
    $g->set( "CONFIG_FEATURE_DD_SIGNAL_HANDLING", "y" );
    $g->set( "CONFIG_FEATURE_DD_THIRD_STATUS_LINE", "y" );
    $g->set( "CONFIG_FEATURE_DD_IBS_OBS", "y" );
}

# dhd_monitor use tar and gz for archive crash log.
if ( $ENV{BUILD_DHD_MONITOR} eq 'y' ) {
    $g->set( "CONFIG_TAR",                         "y" );
    $g->set( "CONFIG_FEATURE_TAR_CREATE",          "y" );
    $g->set( "CONFIG_GZIP",                        "y" );
    $g->set( "CONFIG_FEATURE_SEAMLESS_GZ",         "y" );
}

# DD will be included by default 
$g->set( "CONFIG_DD", "y" );
$g->set( "CONFIG_FEATURE_DD_SIGNAL_HANDLING", "y" );
$g->set( "CONFIG_FEATURE_DD_THIRD_STATUS_LINE", "y" );
$g->set( "CONFIG_FEATURE_DD_IBS_OBS", "y" );

$g->set( [qw[CONFIG_MDEV CONFIG_FEATURE_MDEV_CONF CONFIG_FEATURE_MDEV_RENAME CONFIG_FEATURE_MDEV_RENAME_REGEXP CONFIG_FEATURE_MDEV_EXEC CONFIG_FEATURE_MDEV_LOAD_FIRMWARE ]],"y");

# Disable CONFIG_INIT for HNDROUTER
if ( $ENV{BUILD_BRCM_HNDROUTER} eq 'y' ) {
    if ( $ENV{BUILD_BRCM_CPEROUTER} ne 'y' ) {
        $g->unset("CONFIG_INIT");
    }
    $g->set( "CONFIG_TAR",                         "y" );
    $g->set( "CONFIG_FEATURE_TAR_CREATE",          "y" );
    $g->set( "CONFIG_GZIP",                        "y" );
    $g->set( "CONFIG_FEATURE_SEAMLESS_GZ",         "y" );
}

if ( $ENV{BUILD_SPDTEST} eq 'y' ) {
    $g->set( "CONFIG_TIME",                        "y" );
}

#enable pivot_root and mount loop for SPI NOR Flash
if ( $ENV{BUILD_UBOOT} eq 'y' ) {
    if ( $ENV{DISABLE_NOR_RAW_PARTITION} eq 'y' ) {
    	$g->set( "CONFIG_PIVOT_ROOT",              "y" );
    	$g->set( "CONFIG_FEATURE_MOUNT_LOOP",      "y" );
    	$g->set( "CONFIG_FEATURE_MOUNT_LOOP_CREATE","y" );
    }
}

# WlGetDriverStats.sh use cut for iterating associated STA list
$g->set( "CONFIG_CUT", "y" );

$g->set( "CONFIG_MD5SUM", "y" );
$g->set( "CONFIG_SHA256SUM", "y" );

#Enable sysctl command
$g->set( "CONFIG_BB_SYSCTL", "y" );
# ACTIONS end here

$g->write();


